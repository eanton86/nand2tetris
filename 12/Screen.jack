/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;  // 1000_0000_0000_0000
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i, j, address;

        let i = 0;
        while(i < 256) {
            let j = 0;
            while(j < 32) {
                let address = 16384 + (i * 32) + j;
                do Memory.poke(address, 0);
            }
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, k, mem, bitNum, flag;

        let k = x / 16;
        let address = 16384 + (y * 32) + k;

        let mem = Memory.peek(address);
        let bitNum = x - (16 * k);

        let flag = Screen.bit(mem, bitNum);

        if (flag = 0) {
            if (color) {
                do Memory.poke(address, mem + twoToThe[bitNum]);
            }
        } else {
            if (~color) {
                do Memory.poke(address, mem & ~twoToThe[bitNum]);
            }
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, adyMinusBdx, a, b, aSign, bSign;

        let dx = x2 - x1;
        let dy = y2 - y1;
        let aSign = 1;
        let bSign = 1;

        if (dx < 0) {
            let dx = -dx;
            let aSign = -1;
        }
        if (dy < 0) {
            let dy = -dy;
            let bSign = -1;
        }

        if (dy = 0) {
            while(a < dx) {
                do Screen.drawPixel(x1 + (a * aSign), y1);
                let a = a + 1;
            }
            return;
        }
        if (dx = 0) {
            while(b < dy) {
                do Screen.drawPixel(x1, y1 + (b * bSign));
                let b = b + 1;
            }
            return;
        }

        while((a < (dx + 1)) & (b < (dy + 1))) {
            do Screen.drawPixel(x1 + (a * aSign), y1 + (b * bSign));
            if (adyMinusBdx < 0) {
                let a = a + 1;
                let adyMinusBdx = adyMinusBdx + dy;
            } else {
                let b = b + 1;
                let adyMinusBdx = adyMinusBdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int j, dy, y;
        let dy = y2 - y1;
        while (j < (dy + 1)) {
            let y = y1 + j;
            do Screen.drawLine(x1, y, x2, y);
            let j = j + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, bottom;
        let bottom = y + r;
        let dy = -r + 1;
        while (y + dy < bottom) {
            let dx = Math.sqrt(r * r - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }

    function boolean outsideScreen(int x, int y) {
        return (x < 0) | (x > 511) | (y < 0) | (y > 255);
    }

    function boolean bit(int x, int j) {
        return ~(x & twoToThe[j] = 0);
    }
}
