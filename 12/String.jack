/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int length;
    field int mLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let mLength = maxLength;
        let length = 0;
        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (mLength > 0) {
            do chars.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j + 1 > length)) {
            do Sys.error(20);
        }
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j + 1 > length)) {
            do Sys.error(20);
        }
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let length = length + 1;
        if (length > mLength) {
            do Sys.error(21);
        }
        let chars[length - 1] = c;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        if (length < 0) {
            do Sys.error(21);
        }
        let chars[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, j, c;
        var boolean neg;
        let neg = false;
        let c = chars[j] - 48;
        let j = 0;
        if (chars[j] = 45) { // '-'
            let neg = true;
            let j = 1;
        }

        let v = 0;
        while(j < length) {
            let c = chars[j] - 48;
            if ((c < 0) | (c > 9)) {
                if ((j = 0) | ((j = 1) & neg)) {
                    do Sys.error(22);
                }
                return v;
            }
            let v = v * 10 + c;
            let j = j +1;
        }
        if (neg) {
            return -v;
        }
        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array digits;
        var int div, mod, j;

        let length = 0;
        if (val < 0) {
            let chars[length] = 45; // minus
            let length = 1;
            let val = -val;
        }

        let digits = Array.new(5);
        let digits[0] = -1;
        let digits[1] = -1;
        let digits[2] = -1;
        let digits[3] = -1;
        let digits[4] = -1;

        let j = 4;
        while (val > 0) {
            let div = val / 10;
            let mod = val - (div * 10);
            let digits[j] = mod;
            let val = div;
            let j = j - 1;
        }

        let j = 0;
        while (j < 5) {
            if (digits[j] > -1) {
                let chars[length] = digits[j] + 48;
                let length = length + 1;
            }
            let j = j + 1;
        }
        do digits.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
